use.mc.nonlin = FALSE, # Use non-linear (e.g. quadratic expansion) as instruments?
include.y = TRUE, # Include the dependent variable in the formula, i.e. as instrument
varname.y = "chg_cases", # variable name of the dependent variable
lagTerms.y = 1, # number of lags of the dependent variable
#include.x = TRUE,
#varname.reg.pre = control_filter,
#lagTerms.reg.pre = control_lags,
#include.x.toInstr = TRUE, # include covariates which will not be used as instruments?
#varname.reg.toInstr = control_filter, # name of those covariates
fur.con = TRUE, # include further variables that will be used as instruments for which the coef. should be estimated?
fur.con.diff = TRUE, # Include as differences?
fur.con.lev = FALSE, # Include as levels?
varname.reg.fur = c(instruments_behavior, instruments_policy, instrument_inf_cases), # names of the instruments
lagTerms.reg.fur = c(behavior_lags, policy_lags, inf_lags_cases), # lags of those instruments
include.dum = TRUE, # include time dummies as instrument?
dum.diff = TRUE, #  include as differences?
dum.lev = FALSE, # include as levels?
varname.dum = "week", # variable name of the time dummies
w.mat = "iid.err", # type of weighting matrix
std.err = "corrected", # type of std.err.
estimation = "twostep", # estimation procedure
#inst.thresh = 10, # maximum number of instruments that will be used
opt.meth = "none") # Set to none if you want closed form solutions
summary(mod_3) # Results
# Serial test
mtest.fct(mod_3, 2) # method is appropiate of H_0 cannot be rejected
# Create Table of results (FULL)
coefs_mod_3 = round(coef(summary(mod_3)),4) # Estimated coefficients
test_results_mod_3_slope = c(as.vector(round(summary(mod_3)$slopef$statistic, 4)),
as.vector(round(summary(mod_3)$slopef$p.value, 4)), rep("",2)) # Chisq statistic of Wald test that all slope coeff. are jointly zero
test_results_mod_3_hansen = c(round(as.vector(summary(mod_3)$hansenj$statistic),4),
round(as.vector(summary(mod_3)$hansenj$p.value),4), rep("",2)) # Chisq statistic of Hansen's overidentification test
test_results_mod_3_serial_cor = c(round(as.vector(mtest.fct(mod_3, 2)$statistic), 4),
round(as.vector(mtest.fct(mod_3, 2)$p.value), 4), rep("",2)) # Normal statistic of second order autorcorrelation test
test_stat_header = c("Test statistic", "p-value", "", "")
header_results = c("Coefficent", "Std.Err*", "Value of Z-statistic", "p-value")
results_mod_3 = rbind(coefs_mod_3, test_stat_header, test_results_mod_3_slope,
test_results_mod_3_hansen, test_results_mod_3_serial_cor)
names_coefs = c("Events",
"Travel", "Distance", "Public", "Lock", "Closure", "Visit", "Mask", "% Change Tests",
"Total No. Deaths")
rownames(results_mod_3) = c("lag(% change Cases, 7)", paste0("lag(",names_coefs,", 7)"),
"lag(Total No. Deaths, 14)",
paste("Week",row.names(results_mod_3)[19:49], "Dummy"), "",
c("Wald test**", "Hansen's J-Test", "2nd Order Autocor. Test"))
colnames(results_mod_3) = c("Estimate", "Std.Err*", "Z-stat. value", "p-value")
# Create Latex table
table_mod_3 = xtable(results_mod_3,
caption = "Results of two-step GMM estimation of policy and information on % change in COVID-19 cases for all non-European countries. *Windmeijer corrected standard errors. ** Wald test that all slope coefficents are jointly zero.",
label = "tab_results:cases_spec_3_full_wo_behavior",
align = c("l", "c", "c", "c", "c"))
print.xtable(table_mod_3, type = "latex",
file = "./Tables/Spec_3_Cases_Results_full_wo_behavior.tex", floating = F,
tabular.environment="longtable",
include.rownames = T,
booktabs = TRUE,
size = "tiny")
##### Only Countries that were not heavily imputed ####
# Create a subset of non European countries
imput_names = c("Canada", "Poland", "Spain", "Luxembourg", "Estonia", "Slovenia", "Australia")
numbers_non_imput = identifier_selector %>% filter(!(Name %in% imput_names)) %>%
select(Number)
data_non_impute = trans_data_2 %>% filter(location %in% numbers_non_imput$Number)
# Estimate Model
mod_4 = pdynmc(data_non_impute, # data
varname.i = "location", # variable name of the group identifier
varname.t = "week", # variable name of the time identifier
use.mc.diff = TRUE, # Use differences as instruments?
use.mc.lev = FALSE, # Use levels as instruments?
use.mc.nonlin = FALSE, # Use non-linear (e.g. quadratic expansion) as instruments?
include.y = TRUE, # Include the dependent variable in the formula, i.e. as instrument
varname.y = "chg_cases", # variable name of the dependent variable
lagTerms.y = 1, # number of lags of the dependent variable
#include.x = TRUE,
#varname.reg.pre = control_filter,
#lagTerms.reg.pre = control_lags,
#include.x.toInstr = TRUE, # include covariates which will not be used as instruments?
#varname.reg.toInstr = control_filter, # name of those covariates
fur.con = TRUE, # include further variables that will be used as instruments for which the coef. should be estimated?
fur.con.diff = TRUE, # Include as differences?
fur.con.lev = FALSE, # Include as levels?
varname.reg.fur = c(instruments_behavior, instruments_policy, instrument_inf_cases), # names of the instruments
lagTerms.reg.fur = c(behavior_lags, policy_lags, inf_lags_cases), # lags of those instruments
include.dum = TRUE, # include time dummies as instrument?
dum.diff = TRUE, #  include as differences?
dum.lev = FALSE, # include as levels?
varname.dum = "week", # variable name of the time dummies
w.mat = "iid.err", # type of weighting matrix
std.err = "corrected", # type of std.err.
estimation = "twostep", # estimation procedure
#inst.thresh = 10, # maximum number of instruments that will be used
opt.meth = "none") # Set to none if you want closed form solutions
summary(mod_4) # Results
# Serial test
mtest.fct(mod_4, 2) # method is appropiate of H_0 cannot be rejected
# Create Table of results (FULL)
coefs_mod_4 = round(coef(summary(mod_4)),4) # Estimated coefficients
test_results_mod_4_slope = c(as.vector(round(summary(mod_4)$slopef$statistic, 4)),
as.vector(round(summary(mod_4)$slopef$p.value, 4)), rep("",2)) # Chisq statistic of Wald test that all slope coeff. are jointly zero
test_results_mod_4_hansen = c(round(as.vector(summary(mod_4)$hansenj$statistic),4),
round(as.vector(summary(mod_4)$hansenj$p.value),4), rep("",2)) # Chisq statistic of Hansen's overidentification test
test_results_mod_4_serial_cor = c(round(as.vector(mtest.fct(mod_4, 2)$statistic), 4),
round(as.vector(mtest.fct(mod_4, 2)$p.value), 4), rep("",2)) # Normal statistic of second order autorcorrelation test
test_stat_header = c("Test statistic", "p-value", "", "")
header_results = c("Coefficent", "Std.Err*", "Value of Z-statistic", "p-value")
results_mod_4 = rbind(coefs_mod_4, test_stat_header, test_results_mod_4_slope,
test_results_mod_4_hansen, test_results_mod_4_serial_cor)
names_coefs = c("Events",
"Travel", "Distance", "Public", "Lock", "Closure", "Visit", "Mask", "% Change Tests",
"Total No. Deaths")
rownames(results_mod_4) = c("lag(% change Cases, 7)", paste0("lag(",names_coefs,", 7)"),
"lag(Total No. Deaths, 14)",
paste("Week",row.names(results_mod_4)[19:49], "Dummy"), "",
c("Wald test**", "Hansen's J-Test", "2nd Order Autocor. Test"))
colnames(results_mod_4) = c("Estimate", "Std.Err*", "Z-stat. value", "p-value")
# Create Latex table
table_mod_4 = xtable(results_mod_4,
caption = "Results of two-step GMM estimation of policy and information on % change in COVID-19 cases for all countries except: Canada, Poland, Spain, Luxembourg, Estonia, Slovenia, and Australia. *Windmeijer corrected standard errors. ** Wald test that all slope coefficents are jointly zero.",
label = "tab_results:cases_spec_4_full_wo_behavior",
align = c("l", "c", "c", "c", "c"))
print.xtable(table_mod_4, type = "latex",
file = "./Tables/Spec_4_Cases_Results_full.tex_wo_behavior", floating = F,
tabular.environment="longtable",
include.rownames = T,
booktabs = TRUE,
size = "tiny")
#################################### Death Change ####
##### Basic Specification Deaths ####
# Since pdynmc cannot omit lags of length 0:
trans_data_3 = trans_data %>% group_by(location) %>%
mutate(across(total_cases:distance, ~ dplyr::lag(.x, k = 2))) %>% ungroup()
trans_data_3 = drop_na(trans_data_3)
trans_data_3 = as.data.frame(trans_data_3)
# Behavior affects the dependent variable, therefore those will be included as instruments
instruments_behavior = c()
behavior_lags = c()
# The same can be said for the policy variables
instruments_policy = c("events", "travel", "distance", "public", "lock", "closure", "visit", "mask")
policy_lags = rep(0, length(instruments_policy))
# Lastly we include as information variables the test rate and the total cases/deaths
instrument_inf_deaths = c("chg_test", "total_cases")
inf_lags_deaths = rep(0, length(instrument_inf_deaths))
# Estimate Model
mod_5 = pdynmc(trans_data_3, # data
varname.i = "location", # variable name of the group identifier
varname.t = "week", # variable name of the time identifier
use.mc.diff = TRUE, # Use differences as instruments?
use.mc.lev = FALSE, # Use levels as instruments?
use.mc.nonlin = FALSE, # Use non-linear (e.g. quadratic expansion) as instruments?
include.y = TRUE, # Include the dependent variable in the formula, i.e. as instrument
varname.y = "chg_deaths", # variable name of the dependent variable
lagTerms.y = 1, # number of lags of the dependent variable
#include.x = TRUE,
#varname.reg.pre = control_filter,
#lagTerms.reg.pre = control_lags,
#include.x.toInstr = TRUE, # include covariates which will not be used as instruments?
#varname.reg.toInstr = control_filter, # name of those covariates
fur.con = TRUE, # include further variables that will be used as instruments for which the coef. should be estimated?
fur.con.diff = TRUE, # Include as differences?
fur.con.lev = FALSE, # Include as levels?
varname.reg.fur = c(instruments_behavior, instruments_policy, instrument_inf_deaths), # names of the instruments
lagTerms.reg.fur = c(behavior_lags, policy_lags, inf_lags_deaths), # lags of those instruments
include.dum = TRUE, # include time dummies as instrument?
dum.diff = TRUE, #  include as differences?
dum.lev = FALSE, # include as levels?
varname.dum = "week", # variable name of the time dummies
w.mat = "iid.err", # type of weighting matrix
std.err = "corrected", # type of std.err.
estimation = "twostep", # estimation procedure
#inst.thresh = 10, # maximum number of instruments that will be used
opt.meth = "none") # Set to none if you want closed form solutions
summary(mod_5) # Results
# Serial test
mtest.fct(mod_5, 2) # method is appropiate of H_0 cannot be rejected
# Create Table of results (FULL)
coefs_mod_5 = round(coef(summary(mod_5)),4) # Estimated coefficients
test_results_mod_5_slope = c(as.vector(round(summary(mod_5)$slopef$statistic, 4)),
as.vector(round(summary(mod_5)$slopef$p.value, 4)), rep("",2)) # Chisq statistic of Wald test that all slope coeff. are jointly zero
test_results_mod_5_hansen = c(round(as.vector(summary(mod_5)$hansenj$statistic),4),
round(as.vector(summary(mod_5)$hansenj$p.value),4), rep("",2)) # Chisq statistic of Hansen's overidentification test
test_results_mod_5_serial_cor = c(round(as.vector(mtest.fct(mod_5, 2)$statistic), 4),
round(as.vector(mtest.fct(mod_5, 2)$p.value), 4), rep("",2)) # Normal statistic of second order autorcorrelation test
test_stat_header = c("Test statistic", "p-value", "", "")
header_results = c("Coefficent", "Std.Err*", "Value of Z-statistic", "p-value")
results_mod_5 = rbind(coefs_mod_5, test_stat_header, test_results_mod_5_slope,
test_results_mod_5_hansen, test_results_mod_5_serial_cor)
names_coefs = c("Events",
"Travel", "Distance", "Public", "Lock", "Closure", "Visit", "Mask", "% Change Tests",
"Total No. Cases")
rownames(results_mod_5) = c("lag(% change Deaths, 14)", paste0("lag(",names_coefs,", 14)"),
paste("Week",row.names(results_mod_5)[12:42], "Dummy"), "",
c("Wald test**", "Hansen's J-Test", "2nd Order Autocor. Test"))
colnames(results_mod_5) = c("Estimate", "Std.Err*", "Z-stat. value", "p-value")
# Create Latex table
table_mod_5 = xtable(results_mod_5,
caption = "Results of two-step GMM estimation of policy and information on % change in COVID-19 deaths for all countries. *Windmeijer corrected standard errors. ** Wald test that all slope coefficents are jointly zero.",
label = "tab_results:deaths_spec_5_full_wo_behavior",
align = c("l", "c", "c", "c", "c"))
print.xtable(table_mod_5, type = "latex",
file = "./Tables/Spec_5_Deaths_Results_full_wo_behavior.tex", floating = F,
tabular.environment="longtable",
include.rownames = T,
booktabs = TRUE,
size = "tiny")
##### Only European Countries ####
# Create a subset of European countries
eu_names = data_weekly %>% filter(continent == "Europe") %>% select(location) %>% unique()
numbers_eu = identifier_selector %>% filter(Name %in% eu_names$location) %>% select(Number)
data_eu_2 = trans_data_3 %>% filter(location %in% numbers_eu$Number)
# Estimate Model
mod_6 = pdynmc(data_eu_2, # data
varname.i = "location", # variable name of the group identifier
varname.t = "week", # variable name of the time identifier
use.mc.diff = TRUE, # Use differences as instruments?
use.mc.lev = FALSE, # Use levels as instruments?
use.mc.nonlin = FALSE, # Use non-linear (e.g. quadratic expansion) as instruments?
include.y = TRUE, # Include the dependent variable in the formula, i.e. as instrument
varname.y = "chg_deaths", # variable name of the dependent variable
lagTerms.y = 1, # number of lags of the dependent variable
#include.x = TRUE,
#varname.reg.pre = control_filter,
#lagTerms.reg.pre = control_lags,
#include.x.toInstr = TRUE, # include covariates which will not be used as instruments?
#varname.reg.toInstr = control_filter, # name of those covariates
fur.con = TRUE, # include further variables that will be used as instruments for which the coef. should be estimated?
fur.con.diff = TRUE, # Include as differences?
fur.con.lev = FALSE, # Include as levels?
varname.reg.fur = c(instruments_behavior, instruments_policy, instrument_inf_deaths), # names of the instruments
lagTerms.reg.fur = c(behavior_lags, policy_lags, inf_lags_deaths), # lags of those instruments
include.dum = TRUE, # include time dummies as instrument?
dum.diff = TRUE, #  include as differences?
dum.lev = FALSE, # include as levels?
varname.dum = "week", # variable name of the time dummies
w.mat = "iid.err", # type of weighting matrix
std.err = "corrected", # type of std.err.
estimation = "twostep", # estimation procedure
#inst.thresh = 10, # maximum number of instruments that will be used
opt.meth = "none") # Set to none if you want closed form solutions
summary(mod_6) # Results
# Serial test
mtest.fct(mod_6, 2) # method is appropiate of H_0 cannot be rejected
# Create Table of results (FULL)
coefs_mod_6 = round(coef(summary(mod_6)),4) # Estimated coefficients
test_results_mod_6_slope = c(as.vector(round(summary(mod_6)$slopef$statistic, 4)),
as.vector(round(summary(mod_6)$slopef$p.value, 4)), rep("",2)) # Chisq statistic of Wald test that all slope coeff. are jointly zero
test_results_mod_6_hansen = c(round(as.vector(summary(mod_6)$hansenj$statistic),4),
round(as.vector(summary(mod_6)$hansenj$p.value),4), rep("",2)) # Chisq statistic of Hansen's overidentification test
test_results_mod_6_serial_cor = c(round(as.vector(mtest.fct(mod_6, 2)$statistic), 4),
round(as.vector(mtest.fct(mod_6, 2)$p.value), 4), rep("",2)) # Normal statistic of second order autorcorrelation test
test_stat_header = c("Test statistic", "p-value", "", "")
header_results = c("Coefficent", "Std.Err*", "Value of Z-statistic", "p-value")
results_mod_6 = rbind(coefs_mod_6, test_stat_header, test_results_mod_6_slope,
test_results_mod_6_hansen, test_results_mod_6_serial_cor)
names_coefs = c("Events",
"Travel", "Distance", "Public", "Lock", "Closure", "Visit", "Mask", "% Change Tests",
"Total No. Cases")
rownames(results_mod_6) = c("lag(% change Deaths, 14)", paste0("lag(",names_coefs,", 14)"),
paste("Week",row.names(results_mod_6)[12:42], "Dummy"), "",
c("Wald test**", "Hansen's J-Test", "2nd Order Autocor. Test"))
colnames(results_mod_6) = c("Estimate", "Std.Err*", "Z-stat. value", "p-value")
# Create Latex table
table_mod_6 = xtable(results_mod_6,
caption = "Results of two-step GMM estimation of policy and information on % change in COVID-19 deaths for European countries. *Windmeijer corrected standard errors. ** Wald test that all slope coefficents are jointly zero.",
label = "tab_results:deaths_spec_6_full_wo_behavior",
align = c("l", "c", "c", "c", "c"))
print.xtable(table_mod_6, type = "latex",
file = "./Tables/Spec_6_Deaths_Results_full_wo_behavior.tex", floating = F,
tabular.environment="longtable",
include.rownames = T,
booktabs = TRUE,
size = "tiny")
##### Only Non-European Countries ####
# Create a subset of non European countries
non_eu_names = data_weekly %>% filter(continent != "Europe") %>% select(location) %>% unique()
numbers_non_eu = identifier_selector %>% filter(Name %in% non_eu_names$location) %>% select(Number)
data_non_eu_2 = trans_data_3 %>% filter(location %in% numbers_non_eu$Number)
# Estimate Model
mod_7 = pdynmc(data_non_eu_2, # data
varname.i = "location", # variable name of the group identifier
varname.t = "week", # variable name of the time identifier
use.mc.diff = TRUE, # Use differences as instruments?
use.mc.lev = FALSE, # Use levels as instruments?
use.mc.nonlin = FALSE, # Use non-linear (e.g. quadratic expansion) as instruments?
include.y = TRUE, # Include the dependent variable in the formula, i.e. as instrument
varname.y = "chg_deaths", # variable name of the dependent variable
lagTerms.y = 1, # number of lags of the dependent variable
#include.x = TRUE,
#varname.reg.pre = control_filter,
#lagTerms.reg.pre = control_lags,
#include.x.toInstr = TRUE, # include covariates which will not be used as instruments?
#varname.reg.toInstr = control_filter, # name of those covariates
fur.con = TRUE, # include further variables that will be used as instruments for which the coef. should be estimated?
fur.con.diff = TRUE, # Include as differences?
fur.con.lev = FALSE, # Include as levels?
varname.reg.fur = c(instruments_behavior, instruments_policy, instrument_inf_deaths), # names of the instruments
lagTerms.reg.fur = c(behavior_lags, policy_lags, inf_lags_deaths), # lags of those instruments
include.dum = TRUE, # include time dummies as instrument?
dum.diff = TRUE, #  include as differences?
dum.lev = FALSE, # include as levels?
varname.dum = "week", # variable name of the time dummies
w.mat = "iid.err", # type of weighting matrix
std.err = "corrected", # type of std.err.
estimation = "twostep", # estimation procedure
#inst.thresh = 10, # maximum number of instruments that will be used
opt.meth = "none") # Set to none if you want closed form solutions
summary(mod_7) # Results
# Serial test
mtest.fct(mod_7, 2) # method is appropiate of H_0 cannot be rejected
# Create Table of results (FULL)
coefs_mod_7 = round(coef(summary(mod_7)),4) # Estimated coefficients
test_results_mod_7_slope = c(as.vector(round(summary(mod_7)$slopef$statistic, 4)),
as.vector(round(summary(mod_7)$slopef$p.value, 4)), rep("",2)) # Chisq statistic of Wald test that all slope coeff. are jointly zero
test_results_mod_7_hansen = c(round(as.vector(summary(mod_7)$hansenj$statistic),4),
round(as.vector(summary(mod_7)$hansenj$p.value),4), rep("",2)) # Chisq statistic of Hansen's overidentification test
test_results_mod_7_serial_cor = c(round(as.vector(mtest.fct(mod_7, 2)$statistic), 4),
round(as.vector(mtest.fct(mod_7, 2)$p.value), 4), rep("",2)) # Normal statistic of second order autorcorrelation test
test_stat_header = c("Test statistic", "p-value", "", "")
header_results = c("Coefficent", "Std.Err*", "Value of Z-statistic", "p-value")
results_mod_7 = rbind(coefs_mod_7, test_stat_header, test_results_mod_7_slope,
test_results_mod_7_hansen, test_results_mod_7_serial_cor)
names_coefs = c("Events",
"Travel", "Distance", "Public", "Lock", "Closure", "Visit", "Mask", "% Change Tests",
"Total No. Cases")
rownames(results_mod_7) = c("lag(% change Deaths, 14)", paste0("lag(",names_coefs,", 14)"),
paste("Week",row.names(results_mod_7)[12:42], "Dummy"), "",
c("Wald test**", "Hansen's J-Test", "2nd Order Autocor. Test"))
colnames(results_mod_7) = c("Estimate", "Std.Err*", "Z-stat. value", "p-value")
# Create Latex table
table_mod_7 = xtable(results_mod_7,
caption = "Results of two-step GMM estimation of policy and information on % change in COVID-19 deaths for non-European countries. *Windmeijer corrected standard errors. ** Wald test that all slope coefficents are jointly zero.",
label = "tab_results:deaths_spec_7_full_wo_behavior",
align = c("l", "c", "c", "c", "c"))
print.xtable(table_mod_7, type = "latex",
file = "./Tables/Spec_7_Deaths_Results_full_wo_behavior.tex", floating = F,
tabular.environment="longtable",
include.rownames = T,
booktabs = TRUE,
size = "tiny")
##### Only Countries that were not heavily imputed ####
# Create a subset of non European countries
imput_names = c("Canada", "Poland", "Spain", "Luxembourg", "Estonia", "Slovenia", "Australia")
numbers_non_imput = identifier_selector %>% filter(!(Name %in% imput_names)) %>%
select(Number)
data_non_impute_2 = trans_data_3 %>% filter(location %in% numbers_non_imput$Number)
# Estimate Model
mod_8 = pdynmc(data_non_impute_2, # data
varname.i = "location", # variable name of the group identifier
varname.t = "week", # variable name of the time identifier
use.mc.diff = TRUE, # Use differences as instruments?
use.mc.lev = FALSE, # Use levels as instruments?
use.mc.nonlin = FALSE, # Use non-linear (e.g. quadratic expansion) as instruments?
include.y = TRUE, # Include the dependent variable in the formula, i.e. as instrument
varname.y = "chg_deaths", # variable name of the dependent variable
lagTerms.y = 1, # number of lags of the dependent variable
#include.x = TRUE,
#varname.reg.pre = control_filter,
#lagTerms.reg.pre = control_lags,
#include.x.toInstr = TRUE, # include covariates which will not be used as instruments?
#varname.reg.toInstr = control_filter, # name of those covariates
fur.con = TRUE, # include further variables that will be used as instruments for which the coef. should be estimated?
fur.con.diff = TRUE, # Include as differences?
fur.con.lev = FALSE, # Include as levels?
varname.reg.fur = c(instruments_behavior, instruments_policy, instrument_inf_deaths), # names of the instruments
lagTerms.reg.fur = c(behavior_lags, policy_lags, inf_lags_deaths), # lags of those instruments
include.dum = TRUE, # include time dummies as instrument?
dum.diff = TRUE, #  include as differences?
dum.lev = FALSE, # include as levels?
varname.dum = "week", # variable name of the time dummies
w.mat = "iid.err", # type of weighting matrix
std.err = "corrected", # type of std.err.
estimation = "twostep", # estimation procedure
#inst.thresh = 10, # maximum number of instruments that will be used
opt.meth = "none") # Set to none if you want closed form solutions
summary(mod_8) # Results
# Serial test
mtest.fct(mod_8, 2) # method is appropiate of H_0 cannot be rejected
# Create Table of results (FULL)
coefs_mod_8 = round(coef(summary(mod_8)),4) # Estimated coefficients
test_results_mod_8_slope = c(as.vector(round(summary(mod_8)$slopef$statistic, 4)),
as.vector(round(summary(mod_8)$slopef$p.value, 4)), rep("",2)) # Chisq statistic of Wald test that all slope coeff. are jointly zero
test_results_mod_8_hansen = c(round(as.vector(summary(mod_8)$hansenj$statistic),4),
round(as.vector(summary(mod_8)$hansenj$p.value),4), rep("",2)) # Chisq statistic of Hansen's overidentification test
test_results_mod_8_serial_cor = c(round(as.vector(mtest.fct(mod_8, 2)$statistic), 4),
round(as.vector(mtest.fct(mod_8, 2)$p.value), 4), rep("",2)) # Normal statistic of second order autorcorrelation test
test_stat_header = c("Test statistic", "p-value", "", "")
header_results = c("Coefficent", "Std.Err*", "Value of Z-statistic", "p-value")
results_mod_8 = rbind(coefs_mod_8, test_stat_header, test_results_mod_8_slope,
test_results_mod_8_hansen, test_results_mod_8_serial_cor)
names_coefs = c("Events",
"Travel", "Distance", "Public", "Lock", "Closure", "Visit", "Mask", "% Change Tests",
"Total No. Cases")
rownames(results_mod_8) = c("lag(% change Deaths, 14)", paste0("lag(",names_coefs,", 14)"),
paste("Week",row.names(results_mod_8)[12:42], "Dummy"), "",
c("Wald test**", "Hansen's J-Test", "2nd Order Autocor. Test"))
colnames(results_mod_8) = c("Estimate", "Std.Err*", "Z-stat. value", "p-value")
# Create Latex table
table_mod_8 = xtable(results_mod_8,
caption = "Results of two-step GMM estimation of policy and information on % change in COVID-19 deaths all countries except: Canada, Poland, Spain, Luxembourg, Estonia, Slovenia, and Australia. *Windmeijer corrected standard errors. ** Wald test that all slope coefficents are jointly zero.",
label = "tab_results:deaths_spec_8_full_wo_behavior",
align = c("l", "c", "c", "c", "c"))
print.xtable(table_mod_8, type = "latex",
file = "./Tables/Spec_8_Deaths_Results_full_wo_behavior.tex", floating = F,
tabular.environment="longtable",
include.rownames = T,
booktabs = TRUE,
size = "tiny")
################################### Reduced Results tables ####
##### Cases
# Get coefficent tables and round the values
coef_table_1 = round(coef(summary(mod_1)),4)[1:11,]
coef_table_2 = round(coef(summary(mod_2)),4)[1:11,]
coef_table_3 = round(coef(summary(mod_3)),4)[1:11,]
coef_table_4 = round(coef(summary(mod_4)),4)[1:11,]
# Add asterixes to coefficents
asterix_fun = function(x, y){
x_vals = character(length(x))
for(i in 1:length(x)){
if(y[i] < 0.001){
x_vals[i] = paste0(c(x[i], "***"), collapse = "")
}else if(y[i] < 0.01){
x_vals[i] = paste0(c(x[i], "**"), collapse = "")
}else if(y[i] < 0.05){
x_vals[i] = paste0(c(x[i], "*"), collapse = "")
}else{
x_vals[i] = paste0(c(x[i],""), collapse = "")
}
}
return(x_vals)
}
estimates_1 = asterix_fun(coef_table_1[,1], coef_table_1[, 4])
estimates_2 = asterix_fun(coef_table_2[,1], coef_table_2[, 4])
estimates_3 = asterix_fun(coef_table_3[,1], coef_table_3[, 4])
estimates_4 = asterix_fun(coef_table_4[,1], coef_table_4[, 4])
# Add parenthesis to std.err
std_err_1 = paste0("(", coef_table_1[,2], ")")
std_err_2 = paste0("(", coef_table_2[,2], ")")
std_err_3 = paste0("(", coef_table_3[,2], ")")
std_err_4 = paste0("(", coef_table_4[,2], ")")
# Create columns
column_1 = paste0(estimates_1, " ", std_err_1)
column_2 = paste0(estimates_2, " ", std_err_2)
column_3 = paste0(estimates_3, " ", std_err_3)
column_4 = paste0(estimates_4, " ", std_err_4)
# Create Table
table_results_1 = data.frame(column_1, column_2, column_3, column_4)
colnames(table_results_1) = c("All", "Europe", "Non-Europe", "Reduced")
names_coefs = c("Events",
"Travel", "Distance", "Public", "Lock", "Closure", "Visit", "Mask", "% Change Tests",
"Total No. Deaths")
rownames(table_results_1) = c("lag(% change Cases, 7)", paste0("lag(",names_coefs,", 7)"))
# Create latex table
table_results_1_red = xtable(table_results_1, caption = "Reduced results of two-step GMM estimation of policy and information on \\% change in COVID-19 cases. Specifications are: All: All countries in sample; Europe: All European countries in sample; Non-Europe: All non-European countries in sample; Reduced: All countries except Canada, Poland, Spain, Luxembourg, Estonia, Slovenia, and Australia. \\\\ Windmeijer corrected standard errors in parenthesis. \\\\ ***: $p<0.001$; **: $p< 0.01$; *: $p< 0.05$",
label = "tab_results:cases_reduced_wo_behavior",
align = c("l", "c", "c", "c", "c"))
print.xtable(table_results_1_red, type = "latex",
file = "./Tables/Cases_Results_reduced_wo_behavior.tex", floating = T,
include.rownames = T,
booktabs = TRUE,
size = "small")
##### Deaths
# Get coefficent tables and round the values
coef_table_5 = round(coef(summary(mod_5)),4)[1:11,]
coef_table_6 = round(coef(summary(mod_6)),4)[1:11,]
coef_table_7 = round(coef(summary(mod_7)),4)[1:11,]
coef_table_8 = round(coef(summary(mod_8)),4)[1:11,]
# Add asterixes to coefficents
asterix_fun = function(x, y){
x_vals = character(length(x))
for(i in 1:length(x)){
if(y[i] < 0.001){
x_vals[i] = paste0(c(x[i], "***"), collapse = "")
}else if(y[i] < 0.01){
x_vals[i] = paste0(c(x[i], "**"), collapse = "")
}else if(y[i] < 0.05){
x_vals[i] = paste0(c(x[i], "*"), collapse = "")
}else{
x_vals[i] = paste0(c(x[i],""), collapse = "")
}
}
return(x_vals)
}
estimates_5 = asterix_fun(coef_table_5[,1], coef_table_5[, 4])
estimates_6 = asterix_fun(coef_table_6[,1], coef_table_6[, 4])
estimates_7 = asterix_fun(coef_table_7[,1], coef_table_7[, 4])
estimates_8 = asterix_fun(coef_table_8[,1], coef_table_8[, 4])
# Add parenthesis to std.err
std_err_5 = paste0("(", coef_table_5[,2], ")")
std_err_6 = paste0("(", coef_table_6[,2], ")")
std_err_7 = paste0("(", coef_table_7[,2], ")")
std_err_8 = paste0("(", coef_table_8[,2], ")")
# Create columns
column_5 = paste0(estimates_5, " ", std_err_5)
column_6 = paste0(estimates_6, " ", std_err_6)
column_7 = paste0(estimates_7, " ", std_err_7)
column_8 = paste0(estimates_8, " ", std_err_8)
# Create Table
table_results_2 = data.frame(column_5, column_6, column_7, column_8)
colnames(table_results_2) = c("All", "Europe", "Non-Europe", "Reduced")
names_coefs = c("Events",
"Travel", "Distance", "Public", "Lock", "Closure", "Visit", "Mask", "% Change Tests",
"Total No. Cases")
rownames(table_results_2) = c("lag(% change Deaths, 14)", paste0("lag(",names_coefs,", 14)"))
# Create latex table
table_results_2_red = xtable(table_results_2, caption = "Reduced results of two-step GMM estimation of policy and information on \\% change in COVID-19 deaths Specifications are: All: All countries in sample; Europe: All European countries in sample; Non-Europe: All non-European countries in sample; Reduced: All countries except Canada, Poland, Spain, Luxembourg, Estonia, Slovenia, and Australia. \\\\ Windmeijer corrected standard errors in parenthesis. \\\\ ***: $p<0.001$; **: $p< 0.01$; *: $p< 0.05$",
label = "tab_results:deaths_reduced_wo_behavior",
align = c("l", "c", "c", "c", "c"))
print.xtable(table_results_2_red, type = "latex",
file = "./Tables/Deaths_Results_reduced.tex_wo_behavior", floating = T,
include.rownames = T,
booktabs = TRUE,
size = "small")
ggsave("change_policy_plot.pdf", scale = 2, device = "pdf")
